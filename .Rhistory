x <- 1
x
print(x)
msg <- "hello"
meg
msg
x <- 5 ##nothing printed
x
print(x)
x <- 1:20
x
print(x)
vector()
1L
x <- 1L
x
Inf*10
0/0
x <- c(0.5, 0.6)
x
x <- (TRUE, FALSE)
x <- c(TRUE, FALSE)
x
x <- c(1.7, "a")
x
y <- c(true, 2)
y<- c(TRUE, 2)
y
y <- c("a", TRUE)
y
x <- 0:6
class(x)
as.numeric(x)
as.logical(x)
as.character(x)
as.complex(x)
x <- ("a", "b", "c")
x <- c("a", "b", "c")
as.numeric(x)
as.logical(x)
as.complex(x)
x <- list(l, "a", TRUE, 1 + 4i)
x <- list(1, "a", TRUE, 1 + 4i)
x
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
m
dim(m) <- c(2, 5)
m
x <- 1:3
y ,- 10:12
cbind(x, y)
y <- 10:12
cbind(x, y)
rbind(x, y)
x <- factor(c("yes", "yes", "no", "yes, "no"))
x <- factor(c("yes", "yes", "no", "yes, "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no")), levels = c("yes", "no"))
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
table(x)
unclass(x)
is.na(x)
is.nan(x)
x <- c(1, 2, NA, 10, 3)
is.na(x)
is.nan(x)
x <- c(1, 2, NaN, NA, 4)
is.na(x)
is.nan(x)
x <0 data.drame(foo = 1:4, bar = c(T, T, F, F))
x <- data.drame(foo = 1:4, bar = c(T, T, F, F))
x <- data.frame(foo = 1:4, bar = c(T, T, F, F))
x
nrow(x)
ncol(x)
install.packages("swirl")
library(swirl)
swirl()
swirl()
library(swirl)
install_from_swirl("R Programming")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 +7
x <- 5 + 7
x
x - 3 <- y
y0 <- x - 3
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mr_sqrt <- z - 1
mr_sqrt <- sqrt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
list.files
?list.files
args()
args(list.files())
args(list.files)
old.dir <-
jfe
old.dir <- wd
info()
ls()
old.dir <- getwd()
dir.create()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
file.rename("mytest.R" to "mytest2.R")
file.rename("mytest.R"to"mytest2.R")
getwd()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
getwd()
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink(recursive = TRUE)
getwd()
unlink("testdir2", recursive = TRUE)
setwd()
setwd(old.dir)
unlink('testdir', reursive = TRUE)
unlink('testdir', recursive = TRUE)
swirl()
library(swirl)
swirl()
TRUE == TRUE
(FALSE==TRUE) == FALSE
6==7
6<7
10<=10
5 != 7
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE ||c(TRUE,FALSE,FALSE)
5 > 8 || 6!= 8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6)
xor(5==6, !FALSE)
ints <- sample(19Â¥0)
ints <- sample(10)
ints
ints > 5
which(int>7)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
getwd()
submit()
mean(c(2,4,5))
submit()
boring_function <- function(x) {
#x
submit()
submit()
boring_function(x)
boring_function('My first function!')
boring_function
submit()
play()
my_mean <- function(my_vector) {
sum(my_vector)/length <- mean
mean
}
my_vector(c(1,2,3))
my_mean(c(1,2,3))
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector) <- mean
return(mean)
}
my_mean(c(1,2,3))
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
my_mean(c(1,2,3))
nxt()
submit()
my_mean(c(4,5,10))
submit()
play()
remainder <- function(num, divisor=2) {
num%%(num*divisor)
}
remainder(7,2)
remainder <- function(num, divisor=2) {
num%%(num/divisor)
}
remainder(7,2)
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate()
evaluate(stdev, c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
evaluate(function(x){length(x)}, c(8,4,0))
evaluate(function(x){x[2]}, c(8,4,0))
evaluate(function(x){x[length(3)]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
evaluate(function(x){x[3]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram(I like nuts)
telegram("I like nuts")
submit()
submit()
submit()
mad_libs(place = "home", adjective = "hot", noun = "chair")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
?strptime
class()
class(t4)
Sys.time() > t1
Sys.Time() - 1
Sys.Time() - t1
Sys.time() - t1
difftime(Sys.time(),1,units = 'days')
difftime(Sys.time(),t1,units = 'days')
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl()
install.packages("swirl")
library(swirl)
swirl()
swirl()
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?as.character
cls_vect <- sapply(flags,class)
class(clas_vect)
class(cls_vect)
sum(flafs$ornage)
sum(flags$ornage)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag____)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
print(shape_mat)
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lapply(flags,unique)
unique_vals<-lapply(flags,unique)
unique_vals
lapply(unique_vals,length)
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
?iris
iris
mean(iris$species[,101:150])
mean(iris$Sepal.Length[,101:150])
mean(iris$Sepal.Length[101:150])
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mrcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
debug(ls)
ls
